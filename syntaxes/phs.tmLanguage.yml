$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: Phenoscript
scopeName: source.phs
patterns:
      - # OPHU_LIST|OTU_DATA|OTU
        match: \b(OPHU_LIST|OTU_DATA|OTU|function|if|break|next|repeat|else|for|return|switch|while|in|invisible)\b
        name: support.class.phs
      -
        match: \b(library|require)\b
        name: keyword.control.import.phs
      -
        match: (;|,)
        name: keyword.control.import.phs
      -
        match: (:=|<-|<<-|->|->>)
        name: keyword.control.import.phs
      -
        begin: '#'
        beginCaptures:
          0:
            name: punctuation.definition.comment.phs
        end: \n
        name: comment.line.number-sign.phs
      - 
        captures:
          1:
            name: comment.line.pragma.phs
          2:
            name: entity.name.pragma.name.phs
        match: ^(#pragma[ \t]+mark)[ \t](.*)
        name: comment.line.pragma-mark.phs
      -
        begin: '#\[ ]?(@[a-zA-Z0-9]+)'
        beginCaptures:
          0:
            name: punctuation.definition.comment.roxygen.phs
          1:
            name: keyword.roxygen.phs
        end: \n
        name: comment.line.number-sign.roxygen.phs
      -
        match: \b(logical|numeric|character|complex|matrix|array|data\.frame|list|factor)(?=\s*\()
        name: storage.type.phs # last
      -
        match: \b(library|require)\b
        name: keyword.control.import.phs
      -
        captures:
          1:
            name: entity.name.function.phs
        match: ([[:alpha:].][[:alnum:]._]*)\(
      - # mine edge verbal with .
        captures:
          1:
            name: entity.name.function.phs
        match:  (\.[[:alpha:].][[:alnum:]._]*) 
      - # mine, tagging with :
        captures:
          1:
            name: instance.tag.phs  #comment.function.r constant.character.escape.r meta.method.declaration.r comment.line.number-sign.roxygen.phs
        match: (:[[:alpha:].][[:alnum:]._]*)
      -
        match: \b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(i|L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\b
        name: constant.numeric.phs
      -
        match: \b(T|F|TRUE|FALSE|NULL|NA|Inf|NaN)\b
        name: constant.language.phs
      -
        match: \b(pi|letters|LETTERS|month\.abb|month\.name)\b
        name: support.constant.misc.phs
      -
        match: (\-|\+|\*|\/|%\/%|%%|%\*%|%in%|%o%|%x%|%>%|\^)
        name: keyword.operator.arithmetic.phs
      -
        match: (<-|<<-|->|->>)
        name: keyword.operator.assignment.phs
      - #mine = {
        match: (= *{|})
        name: support.class.phs
      # { # mine
      #   match: (==|!=|<>|<|>|<=|>=)
      #   name: entity.name.function.phs
      # }
      # ">", has_part.
      # "<", part_of.
      # >>, has_characteristic.
      # <<, inheres_in.
      # |>| increased_in_magnitude_relative_to.
      # |<| decreased_in_magnitude_relative_to.
      # |=| has_count:
      - # mine
        match: ( > | < | >> | << | [|]=[|] | [|]>[|] | [|]<[|] )
        name: entity.name.function.phs
      - # mine ;
        match: (;|,)
        name: constant.language.phs
      # {
      #   match: (!|&{1,2}|[|]{1,2})
      #   name: keyword.operator.logical.phs
      # - # !<,  ! <
      -
        match: (! *[><]+)
        name: keyword.operator.logical.phs
      - # !
        match: (!)
        name: keyword.operator.logical.phs
      - # ()[]
        match: (\(|\)|\[|\])
        name: constant.language.phs
      -
        match: (\.\.\.|\$|@|:|\~)
        name: keyword.other.phs #--------------
      -
        begin: '"'
        beginCaptures:
          0:
            name: punctuation.definition.string.begin.phs
        end: '"'
        endCaptures:
          0:
            name: punctuation.definition.string.end.phs
        name: string.quoted.double.phs
        patterns:
          -
            match: \\.
            name: constant.character.escape.phs
      -
        begin: "'"
        beginCaptures:
          0:
            name: punctuation.definition.string.begin.phs
        end: "'"
        endCaptures:
          0:
            name: punctuation.definition.string.end.phs
        name: string.quoted.single.phs
        patterns:
          -
            match: \\.
            name: constant.character.escape.phs
      -
        captures:
          1:
            name: entity.name.function.phs
          2:
            name: keyword.operator.assignment.phs
          3:
            name: keyword.control.phs
        match: ([[:alpha:].][[:alnum:]._]*)\s*(<-)\s*(function)
        name: meta.function.phs
      -
        captures:
          1:
            name: entity.name.tag.phs
          4:
            name: entity.name.type.phs
        match: (setMethod|setReplaceMethod|setGeneric|setGroupGeneric|setClass)\s*\(\s*([[:alpha:]\d]+\s*=\s*)?("|\x{27})([a-zA-Z._\[\$@][a-zA-Z0-9._\[]*?)\3.*
        name: meta.method.declaration.phs
      # -
      #   match: ([[:alpha:].][[:alnum:]._]*)\s*\(
      -
        captures:
          1:
            name: variable.parameter.phs
          2:
            name: keyword.operator.assignment.phs
        match: ([[:alpha:].][[:alnum:]._]*)\s*(=)(?=[^=])
      # {
      #   match: \b([\d_][[:alnum:]._]+)\b
      #   name: invalid.illegal.variable.other.phs
      -
        match: \b([[:alnum:]_]+)(?=::)
        name: entity.namespace.phs
      -
        begin: \{
        beginCaptures:
          0:
            name: punctuation.section.block.begin.phs
        end: \}
        endCaptures:
          0:
            name: punctuation.section.block.end.phs
        name: meta.block.phs